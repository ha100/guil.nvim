OptionSet                                              *update_header.OptionSet*

  Fields: ~
    {contains}  (table<number,boolean>)
    {new}       (table)


Options                                                  *update_header.Options*

  Fields: ~
    {company}  (string)


==============================================================================
Table of Contents                                                *guil.contents*

Introduction ··························································· |intro|
Setup ·································································· |setup|
InsertHeader ··················································· |insert_header|
HasHeader ························································· |has_header|
CheckHeader ····················································· |check_header|
UpdateHeader ··················································· |update_header|

==============================================================================
Introduction                                                             *intro*


a plugin to automatically generate Xcode style Swift file header

Inserts the header when creating a new swift file. Detects module name for
SPM and Tuist project structure. Username data is extracted from git and
macOS username is used as a backup. If the header is present when opening
an existing file, validation checks are performed and visual cues are given.


==============================================================================
Setup                                                                    *setup*


Setup the Module with user specified overrides for settings


Module.setup({opts})                                       *update_header.setup*

  Parameters: ~
    {opts}  (Options)

  Usage: ~
>lua
    return {
        "https://github.com/ha100/guil.nvim",
        ft = "swift",
        lazy = false,
        config = function()
            require("guil").setup({
                company = "ha100"
            })
        end,
        keys = {
            vim.keymap.set("n", "<leader><F4>", ":Guil generate<cr>", { desc = "generate Xcode style header" })
        }
    }
<


==============================================================================
InsertHeader                                                     *insert_header*


Insert Xcode style Swift header at the top of the file


Module.insert_header()                             *update_header.insert_header*
  @usage :Guil generate<cr>


==============================================================================
HasHeader                                                           *has_header*


Check whether current buffer has header comment present


Module.has_header()                                   *update_header.has_header*

  Returns: ~
    (boolean)


==============================================================================
CheckHeader                                                       *check_header*


Check which parts of the header comment are not compliant and return an OptionSet
Mark the non-compliant parts with red color as a visual cue for user.


Module.check_header()                               *update_header.check_header*

  Returns: ~
    (OptionSet)


==============================================================================
UpdateHeader                                                     *update_header*


Update non-compliant parts of a header comment with valid info


Module.update_header()                             *update_header.update_header*


vim:tw=78:ts=8:noet:ft=help:norl:
